import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ExternalLinkButton } from '@/components/ui/external-link-button';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, ClipboardCheck, Download, AlertCircle, Brain, Zap } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface ChecklistItem {
  category: string;
  item: string;
  priority: 'essential' | 'important' | 'nice-to-have';
  questions: string[];
}

interface AIChecklistResult {
  checklistItems: ChecklistItem[];
  summary: string;
  budgetConsiderations: string;
  dealerQuestions: string[];
  searchUrls: {
    buyUrl: string;
    reviewsUrl: string;
    dealersUrl: string;
    priceCheckerUrl: string;
  };
}

const formatTextWithParagraphs = (text: string, inline: boolean = false): React.ReactNode => {
  if (!text) return null;
  
  // Step 1: Remove markdown bold formatting
  let cleanText = text.replace(/\*\*/g, '');
  
  // For inline mode (inside bullet lists), return clean text without extra paragraphs
  if (inline) {
    return <span className="leading-relaxed">{cleanText}</span>;
  }
  
  // Step 2: Add line breaks before bullet points if not already present
  cleanText = cleanText.replace(/([^\n])\s*•\s*/g, '$1\n\n• ');
  
  // Step 3: Add line breaks after lines ending with colon if followed by non-whitespace
  cleanText = cleanText.replace(/:\s*([^\s])/g, ':\n\n$1');
  
  // Step 4: Split on double newlines (including our injected ones)
  const paragraphs = cleanText
    .split(/\n\n+/)
    .map(p => p.trim())
    .filter(p => p.length > 0);
  
  // Step 5: Render with proper spacing
  return (
    <div className="space-y-4">
      {paragraphs.map((para, index) => (
        <p key={index} className="leading-relaxed">
          {para}
        </p>
      ))}
    </div>
  );
};

export const AITechnologyChecklist: React.FC = () => {
  const [userInput, setUserInput] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [result, setResult] = useState<AIChecklistResult | null>(null);
  const [error, setError] = useState('');

  const handleGenerate = async () => {
    if (!userInput.trim()) return;

    setIsGenerating(true);
    setError('');
    setResult(null);

    try {
      const { data, error } = await supabase.functions.invoke('ai-technology-checklist', {
        body: { userRequirements: userInput.trim() }
      });

      if (error) throw error;

      console.log('Full response data:', data);
      
      // The edge function returns { checklist: AIChecklistResult }
      const checklistData = data?.checklist || data;
      
      console.log('Checklist data:', checklistData);
      
      // Validate the data structure
      if (!checklistData || !checklistData.checklistItems || !Array.isArray(checklistData.checklistItems)) {
        console.error('Invalid checklist structure:', checklistData);
        throw new Error('Invalid response format from AI service');
      }

      setResult(checklistData);

    } catch (error) {
      console.error('AI Checklist error:', error);
      setError('Checklist generation is temporarily unavailable. Please try again later or use our manual checklist.');
    } finally {
      setIsGenerating(false);
    }
  };

  const generateDownload = () => {
    if (!result) return;
    
    const checklistText = result.checklistItems.map(item => {
      const questions = item.questions.map(q => `  • ${q}`).join('\n');
      return `□ ${item.item} (${item.priority})\n  Category: ${item.category}\n  Questions to ask:\n${questions}`;
    }).join('\n\n');
    
    const fullText = [
      'AI-Generated RV Technology Research Checklist',
      '===========================================\n',
      `Summary: ${result.summary}\n`,
      `Budget Considerations: ${result.budgetConsiderations}\n`,
      'CHECKLIST ITEMS:',
      '================\n',
      checklistText,
      '\n\nGeneral Dealer Questions:',
      '========================',
      result.dealerQuestions.map(q => `• ${q}`).join('\n'),
      '\n\nGenerated by Smart RV Hub AI Technology Consultant'
    ].join('\n');
    
    const blob = new Blob([fullText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'ai-rv-technology-checklist.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const resetChecklist = () => {
    setUserInput('');
    setResult(null);
    setError('');
  };

  if (result) {
    return (
      <Card className="p-8 bg-gradient-to-br from-[#091020] to-[#131a2a] border-[#1a202c] text-white">
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-[#5B9BD5] to-[#60A5FA] rounded-full mb-4">
            <ClipboardCheck className="h-8 w-8 text-white" />
          </div>
          <h3 className="text-2xl font-bold text-white mb-2">Your Personalized RV Technology Checklist</h3>
          <div className="text-[#E2E8FF] text-lg">{formatTextWithParagraphs(result.summary)}</div>
        </div>

        <div className="space-y-6 mb-8">
          {/* Critical Points Summary */}
          <div className="mb-6 p-5 bg-gradient-to-br from-red-500/10 to-orange-500/10 rounded-lg border-2 border-red-500/30">
            <div className="flex items-center gap-3 mb-4">
              <AlertCircle className="h-6 w-6 text-red-400" />
              <h4 className="text-xl font-semibold text-red-300">Critical Points - Must Address</h4>
            </div>
            <div className="space-y-3">
              {result.checklistItems
                .filter(item => item.priority === 'essential')
                .slice(0, 5)
                .map((item, index) => (
                  <div key={index} className="flex items-start gap-3 p-3 bg-[#151A22]/50 rounded border border-red-500/20">
                    <span className="text-red-400 font-bold text-lg flex-shrink-0">{index + 1}.</span>
                    <div className="flex-1">
                      <p className="font-semibold text-white mb-1">{item.item}</p>
                      <p className="text-sm text-[#E2E8FF]/80 italic">
                        {item.questions[0] ? item.questions[0].split('.')[0] + '.' : item.category}
                      </p>
                    </div>
                  </div>
                ))}
            </div>
            <p className="text-xs text-[#E2E8FF]/60 mt-4 italic">
              ⬇️ Scroll down for complete details on all items, budget breakdown, and dealer questions
            </p>
          </div>

          <div className="p-4 bg-[#151A22]/50 rounded-lg border border-[#1a202c]">
            <h4 className="text-xl font-semibold text-[#60A5FA] mb-2">Budget Considerations</h4>
            <div className="text-[#E2E8FF]">{formatTextWithParagraphs(result.budgetConsiderations)}</div>
          </div>

          <div>
            <h4 className="text-xl font-semibold text-[#60A5FA] mb-4">Technology Items to Research</h4>
            <div className="space-y-4">
              {result.checklistItems.map((item, index) => (
                <div key={index} className="p-4 bg-[#151A22]/50 rounded-lg border border-[#1a202c]">
                  <div className="flex items-start gap-3 mb-3">
                    <CheckCircle className="h-5 w-5 text-[#5B9BD5] flex-shrink-0 mt-0.5" />
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h5 className="font-semibold text-white">{item.item}</h5>
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          item.priority === 'essential' ? 'bg-red-500/20 text-red-300' :
                          item.priority === 'important' ? 'bg-yellow-500/20 text-yellow-300' :
                          'bg-green-500/20 text-green-300'
                        }`}>
                          {item.priority}
                        </span>
                      </div>
                      <p className="text-sm text-[#E2E8FF]/70 mb-3">{item.category}</p>
                      <div>
                        <p className="text-sm text-[#E2E8FF]/80 mb-2">Questions to ask:</p>
                        <ul className="space-y-4">
                          {item.questions.map((question, qIndex) => (
                            <li key={qIndex} className="text-sm text-[#E2E8FF]">
                              <div className="flex items-start gap-2">
                                <span className="text-[#60A5FA] flex-shrink-0 mt-1">•</span>
                                <div className="flex-1">{formatTextWithParagraphs(question, true)}</div>
                              </div>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div>
            <h4 className="text-lg font-semibold text-[#60A5FA] mb-3">General Questions for Any RV Dealer</h4>
            <ul className="space-y-4">
              {result.dealerQuestions.map((question, index) => (
                <li key={index} className="text-[#E2E8FF]">
                  <div className="flex items-start gap-2">
                    <span className="text-[#5B9BD5] flex-shrink-0 mt-1">•</span>
                    <div className="flex-1">{formatTextWithParagraphs(question, true)}</div>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row gap-4">
          <Button 
            onClick={generateDownload}
            variant="outline"
            size="lg"
            className="border-[#1a202c] text-[#E2E8FF] hover:bg-[#151A22]"
          >
            <Download className="h-4 w-4 mr-2" />
            Download Checklist
          </Button>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <ExternalLinkButton 
              href={result.searchUrls.buyUrl}
              variant="default"
              size="lg"
              className="bg-gradient-to-r from-[#5B9BD5] to-[#60A5FA] hover:from-[#4B8FE3] hover:to-[#5B9BD5]"
            >
              Browse Matching RVs
            </ExternalLinkButton>
            <ExternalLinkButton 
              href={result.searchUrls.reviewsUrl}
              variant="outline"
              size="lg"
              className="border-[#5B9BD5]/50 text-[#5B9BD5] hover:bg-[#5B9BD5]/10"
            >
              Read Reviews
            </ExternalLinkButton>
            <ExternalLinkButton 
              href={result.searchUrls.priceCheckerUrl}
              variant="outline"
              size="lg"
              className="border-[#5B9BD5]/50 text-[#5B9BD5] hover:bg-[#5B9BD5]/10"
            >
              Check Prices
            </ExternalLinkButton>
          </div>
          <Button 
            onClick={resetChecklist}
            variant="outline"
            size="lg"
            className="border-[#1a202c] text-[#E2E8FF] hover:bg-[#151A22]"
          >
            New Checklist
          </Button>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-8 bg-gradient-to-br from-[#091020] to-[#131a2a] border-[#1a202c] text-white">
      <div className="text-center mb-8">
        <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-[#5B9BD5] to-[#60A5FA] rounded-full mb-4">
          <Brain className="h-8 w-8 text-white" />
        </div>
        <h3 className="text-2xl font-bold text-white mb-2">AI Technology Research Checklist</h3>
        <p className="text-[#E2E8FF] text-lg">Get a personalized checklist of technology features to research based on your specific needs</p>
      </div>

      <Alert className="mb-6 border-[#5B9BD5]/30 bg-[#5B9BD5]/10">
        <AlertCircle className="h-4 w-4 text-[#5B9BD5]" />
        <AlertDescription className="text-[#E2E8FF]">
          This AI tool creates a custom research checklist to help you ask the right questions when shopping for RVs.
        </AlertDescription>
      </Alert>

      <div className="space-y-6">
        <div>
          <label className="block text-white font-medium mb-3">
            Describe your RV plans, travel style, and what technology features you think you might need:
          </label>
          <Textarea
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="Example: We plan to travel full-time and work remotely from the RV. We'll stay in both campgrounds and boondock frequently. I need reliable internet, good power management for my equipment, and want to monitor systems while away from the RV..."
            className="min-h-32 bg-[#151A22] border-[#1a202c] text-white placeholder-[#E2E8FF]/50"
            disabled={isGenerating}
          />
        </div>

        <Button
          onClick={handleGenerate}
          disabled={!userInput.trim() || isGenerating}
          className="w-full bg-gradient-to-r from-[#5B9BD5] to-[#60A5FA] hover:from-[#4B8FE3] hover:to-[#5B9BD5] text-lg py-6"
        >
          {isGenerating ? (
            <>
              <div className="animate-spin mr-2 w-5 h-5 border-2 border-white border-t-transparent rounded-full" />
              Generating Your Personal Checklist...
            </>
          ) : (
            <>
              <Zap className="mr-2 h-5 w-5" />
              Generate My AI Research Checklist
            </>
          )}
        </Button>

        {error && (
          <Alert className="border-red-500 bg-red-500/10">
            <AlertCircle className="h-4 w-4 text-red-500" />
            <AlertDescription className="text-red-200">
              {error}
            </AlertDescription>
          </Alert>
        )}
      </div>
    </Card>
  );
};