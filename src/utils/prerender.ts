/**
 * Prerendering utilities for improved SEO
 * Helps serve static content to bots while maintaining SPA functionality
 */

// Detect if this is a bot/crawler
export const isBot = (): boolean => {
  if (typeof navigator === 'undefined') return false;
  return /bot|crawler|spider|crawling|googlebot|bingbot|slurp|duckduckbot|baiduspider|yandexbot|sogou|facebook|twitter|whatsapp|telegram/i.test(navigator.userAgent);
};

// Detect if this is a social media crawler
export const isSocialBot = (): boolean => {
  if (typeof navigator === 'undefined') return false;
  return /facebook|twitter|whatsapp|telegram|linkedin|slack|discord/i.test(navigator.userAgent);
};

// Cache for prerendered content
const prerenderCache = new Map<string, string>();

/**
 * Get prerendered HTML for a route (if available)
 * This would typically be generated by a build-time prerendering service
 */
export const getPrerenderContent = (path: string): string | null => {
  return prerenderCache.get(path) || null;
};

/**
 * Set prerendered content for a route
 * This can be used to cache content for bots
 */
export const setPrerenderContent = (path: string, html: string): void => {
  prerenderCache.set(path, html);
};

/**
 * Generate static HTML snapshot of current page
 * This can be used for dynamic prerendering
 */
export const generatePageSnapshot = (): string => {
  if (typeof document === 'undefined') return '';
  
  const html = document.documentElement.outerHTML;
  
  // Clean up dynamic elements that shouldn't be in snapshots
  const cleanedHtml = html
    .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '') // Remove scripts
    .replace(/data-react[^=]*="[^"]*"/g, '') // Remove React attributes
    .replace(/<!--[\s\S]*?-->/g, '') // Remove comments
    .replace(/\s+/g, ' ') // Normalize whitespace
    .trim();
    
  return cleanedHtml;
};

/**
 * Handle bot-specific optimizations
 * This should be called early in the application lifecycle
 */
export const handleBotOptimizations = (): void => {
  if (!isBot()) return;

  // Remove loading screens immediately for bots
  const loadingElements = document.querySelectorAll('.loading-fallback, .loading-screen, .spinner');
  loadingElements.forEach(el => {
    (el as HTMLElement).style.display = 'none';
  });

  // Add bot-specific meta tags
  const meta = document.createElement('meta');
  meta.name = 'robots';
  meta.content = 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1';
  document.head.appendChild(meta);

  // Ensure all lazy-loaded images are loaded immediately for bots
  const lazyImages = document.querySelectorAll('img[data-src], img[loading="lazy"]');
  lazyImages.forEach(img => {
    const image = img as HTMLImageElement;
    if (image.dataset.src) {
      image.src = image.dataset.src;
      image.removeAttribute('data-src');
    }
    image.removeAttribute('loading');
  });
};

/**
 * Netlify/Vercel-style prerendering detection
 * These services can detect and prerender pages for bots
 */
export const shouldPrerender = (): boolean => {
  return isBot() || isSocialBot();
};

/**
 * Generate prerender configuration for build tools
 * This helps build tools know which routes to prerender
 */
export const getPrerenderRoutes = (): string[] => {
  return [
    '/',
    '/about',
    '/products', 
    '/pricing',
    '/contact',
    '/blog',
    '/features',
    '/models',
    '/models/compact',
    '/models/luxury', 
    '/models/adventure',
    '/models/compare',
    '/technology',
    '/documentation',
    '/calculators',
    '/troubleshooting'
  ];
};